Here is the code for the `weighted_mean_absolute_deviation` function that calculates the Weighted Mean Absolute Deviation around the weighted mean of a dataset in an energy-efficient manner:

```python
from typing import List, Tuple


def weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float:
    total_weight = sum(w for _, w in numbers)
    
    if total_weight != 1 or any(w <= 0 for _, w in numbers):
        return "Weights must be positive and sum to 1"
    
    weighted_mean = sum(x * w for x, w in numbers) / total_weight
    wmad = sum(w * abs(x - weighted_mean) for x, w in numbers) / total_weight
    
    return wmad


# Example usage
result = weighted_mean_absolute_deviation([(1.0, 0.1), (2.0, 0.2), (3.0, 0.3), (4.0, 0.4)])
print(result)
```

This code efficiently calculates the Weighted Mean Absolute Deviation while ensuring that the weights are positive and sum to 1.