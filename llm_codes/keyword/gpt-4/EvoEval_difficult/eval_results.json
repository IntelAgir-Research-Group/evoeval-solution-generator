{"eval": {"EvoEval/63": [{"task_id": "EvoEval/63", "solution": "\ndef customFibFib(n: int, startSequence: list, p: int):\n    if n < 3:\n        return startSequence[n]\n\n    fib_sequence = startSequence[:]\n\n    for i in range(3, n + 1):\n        next_value = fib_sequence[i - 1] + fib_sequence[i - 2] + fib_sequence[i - 3]\n        if next_value > p:\n            return 'Limit Exceeded'\n        fib_sequence.append(next_value)\n\n    return fib_sequence[n]\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/61": [{"task_id": "EvoEval/61", "solution": "\ndef correct_bracketing_advanced(brackets: str) -> bool:\n    stack = []\n    bracket_map = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n\n    for bracket in brackets:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        elif len(stack) == 0 or bracket != bracket_map[stack.pop()]:\n            return False\n\n    return len(stack) == 0\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/52": [{"task_id": "EvoEval/52", "solution": "\ndef below_above_threshold(l: list, t1: int, t2: int, s: str):\n    if s == 'below':\n        for i, num in enumerate(l):\n            if num >= t1:\n                return i\n        return True\n    elif s == 'above':\n        for i, num in enumerate(l):\n            if num <= t2:\n                return i\n        return True\n    else:\n        return -1\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/90": [{"task_id": "EvoEval/90", "solution": "\ndef next_smallest_and_largest(lst):\n    if len(lst) < 2:\n        return (None, None)\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n    largest = float('-inf')\n    second_largest = float('-inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif largest > num > second_largest:\n            second_largest = num\n\n    if second_smallest == float('inf'):\n        second_smallest = None\n    if second_largest == float('-inf'):\n        second_largest = None\n\n    return (second_smallest, second_largest)\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/4": [{"task_id": "EvoEval/4", "solution": "\ndef weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float:\n    # Calculate the weighted mean\n    weighted_sum = sum(x * w for x, w in numbers)\n    total_weight = sum(w for _, w in numbers)\n\n    # Check if weights are positive and sum to 1\n    if total_weight <= 0 or abs(total_weight - 1) > 1e-9:\n        return \"Weights must be positive and sum to 1\"\n\n    weighted_mean = weighted_sum / total_weight\n\n    # Calculate the weighted mean absolute deviation\n    wmad = sum(w * abs(x - weighted_mean) for x, w in numbers) / total_weight\n\n    return wmad\n", "base_status": "fail", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/66": [{"task_id": "EvoEval/66", "solution": "\ndef advancedDigitSum(s, t):\n    s_sum = sum(ord(c) for c in s if c.isupper())\n    t_sum = sum(ord(c) for c in t if c.islower())\n    return s_sum, t_sum\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/79": [{"task_id": "EvoEval/79", "solution": "\ndef decimal_to_binary(decimal, padding_length):\n    # Check if inputs are valid\n    if not isinstance(decimal, int) or not isinstance(padding_length, int) or decimal < 0 or padding_length < 0:\n        return \"Invalid Input\"\n\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n\n    # Check if padding_length is sufficient\n    if len(binary) > padding_length:\n        return \"Padding length is too small\"\n\n    # Pad binary with '0's at the beginning\n    binary = binary.zfill(padding_length)\n\n    # Add extra characters 'db' at the beginning and at the end\n    binary = \"db\" + binary + \"db\"\n\n    return binary\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/53": [{"task_id": "EvoEval/53", "solution": "\ndef add_elements(list1: list, list2: list, index: int) -> tuple:\n    try:\n        result = list1[index] + list2[index]\n        return result, False\n    except IndexError:\n        return None, True\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/16": [{"task_id": "EvoEval/16", "solution": "\ndef count_distinct_characters_substrings(string: str, length: int) -> dict:\n    if length > len(string):\n        return {}\n    else:\n        substrings = [string[i: i + length] for i in range(len(string) - length + 1)]\n        return {substring: len(set(substring)) for substring in substrings}\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}]}}