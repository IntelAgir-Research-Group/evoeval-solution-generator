{
    "eval": {
        "EvoEval/61": [
            {
                "task_id": "EvoEval/61",
                "solution": "\ndef correct_bracketing_advanced(brackets: str):\n    stack = []\n    opening_brackets = \"({[\"\n    closing_brackets = \")}]\"\n    bracket_pairs = {')': '(', '}': '{', ']': '['}\n\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        elif bracket in closing_brackets:\n            if not stack or stack[-1] != bracket_pairs[bracket]:\n                return False\n            stack.pop()\n\n    return not stack\n\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/90": [
            {
                "task_id": "EvoEval/90",
                "solution": "\ndef next_smallest_and_largest(lst):\n    if len(lst) < 2:\n        return None, None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n    largest = float('-inf')\n    second_largest = float('-inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest, smallest = smallest, num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n\n        if num > largest:\n            second_largest, largest = largest, num\n        elif largest > num > second_largest:\n            second_largest = num\n\n    return second_smallest if second_smallest != float('inf') else None, second_largest if second_largest != float('-inf') else None\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/63": [
            {
                "task_id": "EvoEval/63",
                "solution": "\ndef customFibFib(n: int, startSequence: list, p: int):\n    if n < 3:\n        return startSequence[n]\n\n    sequence = startSequence[:]\n\n    for i in range(3, n+1):\n        next_value = sequence[i-1] + sequence[i-2] + sequence[i-3]\n        if next_value > p:\n            return 'Limit Exceeded'\n        sequence.append(next_value)\n\n    return sequence[-1]\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/52": [
            {
                "task_id": "EvoEval/52",
                "solution": "\ndef below_above_threshold(l: list, t1: int, t2: int, s: str):\n    if s == 'below':\n        for i, val in enumerate(l):\n            if val >= t1:\n                return i\n        return True\n    elif s == 'above':\n        for i, val in enumerate(l):\n            if val <= t2:\n                return i\n        return True\n    else:\n        return -1\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/79": [
            {
                "task_id": "EvoEval/79",
                "solution": "\ndef decimal_to_binary(decimal, padding_length):\n    if not isinstance(decimal, int) or not isinstance(padding_length, int):\n        return \"Invalid Input\"\n    if decimal < 0 or padding_length < 0:\n        return \"Invalid Input\"\n    binary = bin(decimal)[2:]\n    if len(binary) > padding_length:\n        return \"Padding length is too small\"\n    padded_binary = binary.zfill(padding_length)\n    return f\"db{padded_binary}db\"\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/53": [
            {
                "task_id": "EvoEval/53",
                "solution": "\ndef add_elements(list1: list, list2: list, index: int):\n    try:\n        return list1[index] + list2[index], False\n    except IndexError:\n        return None, True\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/4": [
            {
                "task_id": "EvoEval/4",
                "solution": "\nfrom typing import List, Tuple\n\ndef weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float:\n    weights = [x[1] for x in numbers]\n    if any(w <= 0 for w in weights) or sum(weights) != 1:\n        return 'Weights must be positive and sum to 1'\n    \n    weighted_mean = sum(x[0] * x[1] for x in numbers)\n    weighted_mad = sum(x[1] * abs(x[0] - weighted_mean) for x in numbers) / sum(weights)\n    \n    return weighted_mad\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/66": [
            {
                "task_id": "EvoEval/66",
                "solution": "\ndef advancedDigitSum(s, t):\n    sum_s = sum(ord(c) for c in s if c.isupper())\n    sum_t = sum(ord(c) for c in t if c.islower())\n    return (sum_s, sum_t)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/16": [
            {
                "task_id": "EvoEval/16",
                "solution": "def count_distinct_characters_substrings(string: str, length: int) -> dict:\n    if length > len(string):\n        return {}\n    \n    result = {}\n    for i in range(len(string) - length + 1):\n        substring = string[i:i+length]\n        distinct_chars = len(set(substring))\n        result[substring] = distinct_chars\n    \n    return result\n\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ]
    }
}
