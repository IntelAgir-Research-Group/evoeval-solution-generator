 Here is a Python solution for the problem:

```python
def below_above_threshold(l: list, t1: int, t2: int, s: str):
    if s == 'below':
        for i, val in enumerate(l):
            if val >= t1:
                return i
        return True
    elif s == 'above':
        for i, val in enumerate(l):
            if val <= t2:
                return i
        return True
    else:
        return -1
```

This function works by iterating over the list `l` and checking whether each element is below the threshold `t1` if `s` is 'below', or above the threshold `t2` if `s` is 'above'. If any element is not according to the condition, the function returns the index of the first element that violates the condition. If `s` is neither 'below' nor 'above', the function returns -1.

This function is energy efficient because it only iterates over the list once, resulting in a time complexity of O(n), where n is the length of the list. It does not perform any unnecessary computations, and it immediately returns when it finds a violation of the condition, resulting in a best-case time complexity of O(1).