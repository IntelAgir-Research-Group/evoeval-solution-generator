 Here is a Python solution that uses dynamic programming to efficiently compute the n-th element of the CustomFibFib sequence:

```python
def customFibFib(n: int, startSequence: list, p: int):
    if n < 3:
        return startSequence[n]

    sequence = startSequence[:]

    for i in range(3, n+1):
        next_value = sequence[i-1] + sequence[i-2] + sequence[i-3]
        if next_value > p:
            return 'Limit Exceeded'
        sequence.append(next_value)

    return sequence[-1]
```

This function first checks if the requested index `n` is less than 3. If it is, it returns the `n-th` value from the starting sequence.

If `n` is 3 or greater, it creates a new list `sequence` that is a copy of the starting sequence. It then iterates from 3 to `n` (inclusive), computing the next value in the sequence as the sum of the previous three values. If the next value exceeds the limit `p`, it immediately returns 'Limit Exceeded'. Otherwise, it appends the next value to the sequence.

Finally, it returns the last value computed, which is the `n-th` value of the CustomFibFib sequence.