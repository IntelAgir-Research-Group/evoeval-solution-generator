To create an energy-efficient version of the `advancedDigitSum` function, we can focus on minimizing the number of operations and avoiding unnecessary computations. Here's a Python implementation that adheres to these principles:

```python
def advancedDigitSum(s, t):
    """
    Calculate the sum of ASCII codes for uppercase characters in 's' and lowercase characters in 't'.

    :param s: A string containing any characters.
    :param t: A string containing any characters.
    :return: A tuple (sum_s, sum_t) where sum_s is the sum of ASCII codes of uppercase characters in 's'
             and sum_t is the sum of ASCII codes of lowercase characters in 't'.
    """
    sum_s = sum(ord(char) for char in s if char.isupper())
    sum_t = sum(ord(char) for char in t if char.islower())
    
    return (sum_s, sum_t)

# Example usage:
print(advancedDigitSum("", "abc"))        # Output: (0, 294)
print(advancedDigitSum("abAB", "abc"))    # Output: (131, 294)
print(advancedDigitSum("abcCd", ""))      # Output: (67, 0)
print(advancedDigitSum("helloE", "abc"))  # Output: (69, 294)
print(advancedDigitSum("woArBld", "xyz")) # Output: (131, 363)
print(advancedDigitSum("aAaaaXa", ",.!")) # Output: (153, 0)
```

### Explanation:
1. **Generator Expressions**: We use generator expressions inside the `sum()` function to iterate over the characters of the strings `s` and `t`. This avoids creating intermediate lists, making the function more memory efficient.
2. **Conditional Checks**: The `char.isupper()` and `char.islower()` methods are used to filter out the characters that are not of the required case, ensuring that only relevant characters contribute to the sum.
3. **Direct Summation**: The `sum()` function directly accumulates the ASCII values of the filtered characters, reducing the need for additional loops or data structures.

This implementation is both concise and efficient, making it suitable for handling large strings with minimal computational overhead.