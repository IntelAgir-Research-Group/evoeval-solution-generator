Here's the code that should be energy efficient:

```python
def count_distinct_characters_substrings(string: str, length: int) -> dict:
    if length > len(string):
        return {}
    result = {}
    for i in range(len(string) - length + 1):
        substring = string[i:i+length]
        distinct_chars = set(substring)
        result[substring] = len(distinct_chars)
    return result
```

This code uses a sliding window approach to iterate through the string and extract substrings of the given length. It then uses a set to find the distinct characters in each substring and stores the count in a dictionary. The time complexity of this approach is O(n*k), where n is the length of the string and k is the length of the substring. This is because for each substring, we need to iterate through its characters to find the distinct ones.
