Here is the optimized code for your function. It uses a single pass through each string to calculate the ASCII sum, which minimizes memory accesses and improves performance. It also uses the built-in `ord` function to get the ASCII value of a character, and the `isupper` and `islower` functions to check the case of the characters.

```python
def advancedDigitSum(s, t):
    # Initialize the sums
    sum_s = 0
    sum_t = 0

    # Calculate the sum for 's'
    for char in s:
        if char.isupper():
            sum_s += ord(char)

    # Calculate the sum for 't'
    for char in t:
        if char.islower():
            sum_t += ord(char)

    # Return the sums as a tuple
    return (sum_s, sum_t)
```

This code follows the guidelines for energy-efficient coding by minimizing memory accesses and avoiding redundant operations. It also uses built-in Python functions for efficiency.