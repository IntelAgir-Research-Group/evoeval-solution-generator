{
    "eval": {
        "EvoEval/52": [
            {
                "task_id": "EvoEval/52",
                "solution": "\ndef below_above_threshold(l: list, t1: int, t2: int, s: str):\n    if s == 'below':\n        for i, num in enumerate(l):\n            if num >= t1:\n                return i\n        return True\n    elif s == 'above':\n        for i, num in enumerate(l):\n            if num <= t2:\n                return i\n        return True\n    else:\n        return -1\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/61": [
            {
                "task_id": "EvoEval/61",
                "solution": "\ndef correct_bracketing_advanced(brackets: str) -> bool:\n    stack = []\n    bracket_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for bracket in brackets:\n        if bracket in bracket_map.values():  # opening brackets\n            stack.append(bracket)\n        elif bracket in bracket_map.keys():  # closing brackets\n            if stack == [] or bracket_map[bracket] != stack.pop():\n                return False\n    return stack == []\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/63": [
            {
                "task_id": "EvoEval/63",
                "solution": "\ndef customFibFib(n: int, startSequence: list, p: int):\n    # Check if n is less than the length of the start sequence\n    if n < len(startSequence):\n        return startSequence[n]\n\n    # Initialize the list with the start sequence\n    fib = startSequence[:]\n\n    # Compute the next elements of the sequence\n    for i in range(len(startSequence), n + 1):\n        # Compute the next element\n        next_element = fib[i - 1] + fib[i - 2] + fib[i - 3]\n\n        # Check if the sum exceeds p\n        if next_element > p:\n            return 'Limit Exceeded'\n\n        # Add the next element to the list\n        fib.append(next_element)\n\n    # Return the n-th element of the sequence\n    return fib[n]\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/90": [
            {
                "task_id": "EvoEval/90",
                "solution": "\ndef next_smallest_and_largest(lst):\n    if len(lst) < 2:\n        return (None, None)\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n    largest = float('-inf')\n    second_largest = float('-inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif largest > num > second_largest:\n            second_largest = num\n\n    if second_smallest == float('inf'):\n        second_smallest = None\n    if second_largest == float('-inf'):\n        second_largest = None\n\n    return (second_smallest, second_largest)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/79": [
            {
                "task_id": "EvoEval/79",
                "solution": "\ndef decimal_to_binary(decimal, padding_length):\n    # Check if inputs are valid\n    if not isinstance(decimal, int) or not isinstance(padding_length, int) or decimal < 0 or padding_length < 0:\n        return \"Invalid Input\"\n\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n\n    # Check if padding length is sufficient\n    if len(binary) > padding_length:\n        return \"Padding length is too small\"\n\n    # Pad binary with '0's at the beginning\n    binary = binary.zfill(padding_length)\n\n    # Add extra characters at the beginning and end\n    binary = \"db\" + binary + \"db\"\n\n    return binary\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/53": [
            {
                "task_id": "EvoEval/53",
                "solution": "\ndef add_elements(list1: list, list2: list, index: int):\n    try:\n        result = list1[index] + list2[index]\n        return (result, False)\n    except IndexError:\n        return (None, True)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/4": [
            {
                "task_id": "EvoEval/4",
                "solution": "\nfrom typing import List, Tuple\nimport numpy as np\n\ndef weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float:\n    # Convert the list of tuples to a numpy array for efficient computation\n    numbers_array = np.array(numbers)\n\n    # Separate the data points and weights\n    data_points = numbers_array[:, 0]\n    weights = numbers_array[:, 1]\n\n    # Check if weights are positive and sum to 1\n    if np.any(weights <= 0) or not np.isclose(np.sum(weights), 1):\n        return \"Weights must be positive and sum to 1\"\n\n    # Calculate the weighted mean\n    weighted_mean = np.average(data_points, weights=weights)\n\n    # Calculate the weighted mean absolute deviation\n    wmad = np.sum(weights * np.abs(data_points - weighted_mean))\n\n    return wmad\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/66": [
            {
                "task_id": "EvoEval/66",
                "solution": "\ndef advancedDigitSum(s, t):\n    # Initialize the sums\n    sum_s = 0\n    sum_t = 0\n\n    # Calculate the sum for 's'\n    for char in s:\n        if char.isupper():\n            sum_s += ord(char)\n\n    # Calculate the sum for 't'\n    for char in t:\n        if char.islower():\n            sum_t += ord(char)\n\n    # Return the sums as a tuple\n    return (sum_s, sum_t)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/16": [
            {
                "task_id": "EvoEval/16",
                "solution": "\ndef count_distinct_characters_substrings(string: str, length: int) -> dict:\n    if length > len(string):\n        return {}\n\n    result = {}\n    for i in range(len(string) - length + 1):\n        substring = string[i:i+length]\n        result[substring] = len(set(substring))\n\n    return result\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ]
    }
}
