Here is an energy-efficient code for the problem. This code uses a single pass through the list to find the 2nd smallest and 2nd largest elements, thus achieving O(n) time complexity. It also minimizes memory accesses by using only a few variables and avoids creating new objects.

```python
def next_smallest_and_largest(lst):
    if len(lst) < 2:
        return (None, None)

    smallest = float('inf')
    second_smallest = float('inf')
    largest = float('-inf')
    second_largest = float('-inf')

    for num in lst:
        if num < smallest:
            second_smallest = smallest
            smallest = num
        elif smallest < num < second_smallest:
            second_smallest = num

        if num > largest:
            second_largest = largest
            largest = num
        elif largest > num > second_largest:
            second_largest = num

    if second_smallest == float('inf'):
        second_smallest = None
    if second_largest == float('-inf'):
        second_largest = None

    return (second_smallest, second_largest)
```

This function works by maintaining four variables: `smallest`, `second_smallest`, `largest`, and `second_largest`. As it iterates through the list, it updates these variables as necessary. If a number is smaller than `smallest`, it updates `second_smallest` to the old `smallest` and updates `smallest` to the new number. If a number is larger than `largest`, it updates `second_largest` to the old `largest` and updates `largest` to the new number. If a number is between `smallest` and `second_smallest`, it updates `second_smallest`. If a number is between `largest` and `second_largest`, it updates `second_largest`. At the end, if `second_smallest` or `second_largest` have not been updated, it sets them to `None`.