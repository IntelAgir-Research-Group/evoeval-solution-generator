Here's the optimized code for the given problem:

```python
def count_distinct_characters_substrings(string: str, length: int) -> dict:
    if length > len(string):
        return {}
    result = {}
    for i in range(len(string) - length + 1):
        substring = string[i:i+length]
        distinct_chars = set(substring)
        result[substring] = len(distinct_chars)
    return result
```

Explanation:

1. We first check if the length is greater than the string length. If it is, we return an empty dictionary.
2. We create an empty dictionary called `result` to store the substrings and their distinct character counts.
3. We use a for loop to iterate over the string, starting from the first character and ending at the last character minus the length plus one. This ensures that we get all substrings of the given length.
4. We extract the substring using slicing and store it in a variable called `substring`.
5. We create a set called `distinct_chars` to store the distinct characters in the substring.
6. We add the substring and its distinct character count to the `result` dictionary.
7. Finally, we return the `result` dictionary.

This code is optimized by using a set to store the distinct characters in the substring, which has a constant time complexity of O(1) for insertion and lookup. This makes the code more efficient than using a list or tuple to store the distinct characters.
