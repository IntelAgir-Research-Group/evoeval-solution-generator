{
    "eval": {
        "EvoEval/52": [
            {
                "task_id": "EvoEval/52",
                "solution": "\ndef below_above_threshold(l: list, t1: int, t2: int, s: str) -> Union[bool, int]:\n    if s == 'below':\n        for i, num in enumerate(l):\n            if num >= t1:\n                return i\n        return True\n    elif s == 'above':\n        for i, num in enumerate(l):\n            if num <= t2:\n                return i\n        return True\n    else:\n        return -1\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/90": [
            {
                "task_id": "EvoEval/90",
                "solution": "\ndef next_smallest_and_largest(lst):\n    if len(lst) < 2:\n        return (None, None)\n    \n    smallest = largest = None\n    smallest_count = largest_count = 0\n    \n    for num in lst:\n        if smallest is None or num < smallest:\n            smallest = num\n            smallest_count = 1\n        elif num == smallest:\n            smallest_count += 1\n        \n        if largest is None or num > largest:\n            largest = num\n            largest_count = 1\n        elif num == largest:\n            largest_count += 1\n    \n    if smallest_count > 1 or largest_count > 1:\n        return (None, None)\n    \n    return (smallest, largest)\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        [
                            -1,
                            -2,
                            -3,
                            -4,
                            -5
                        ]
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/63": [
            {
                "task_id": "EvoEval/63",
                "solution": "\ndef customFibFib(n: int, startSequence: list, p: int):\n    if n == 0:\n        return startSequence[0]\n    elif n == 1:\n        return startSequence[1]\n    elif n == 2:\n        return startSequence[2]\n    else:\n        a, b, c = startSequence\n        for i in range(3, n+1):\n            a, b, c = b, c, a+b+c\n            if c > p:\n                return 'Limit Exceeded'\n        return c\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/61": [
            {
                "task_id": "EvoEval/61",
                "solution": "\ndef correct_bracketing_advanced(brackets: str) -> bool:\n    stack = []\n    bracket_map = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for bracket in brackets:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        elif stack and stack[-1] == bracket_map[bracket]:\n            stack.pop()\n        else:\n            return False\n    return not stack\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        "()"
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/79": [
            {
                "task_id": "EvoEval/79",
                "solution": "\ndef decimal_to_binary(decimal, padding_length):\n    if not isinstance(decimal, int) or not isinstance(padding_length, int) or decimal < 0 or padding_length < 0:\n        return \"Invalid Input\"\n    binary = bin(decimal)[2:]\n    if len(binary) > padding_length:\n        return \"Padding length is too small\"\n    binary = binary.zfill(padding_length)\n    return f\"db{binary}db\"\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/4": [
            {
                "task_id": "EvoEval/4",
                "solution": "\nfrom typing import List, Tuple\n\ndef weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float:\n    total_weight = sum(w for x, w in numbers)\n    if total_weight <= 0:\n        return \"Weights must be positive and sum to 1\"\n    \n    weighted_mean = sum(x * w for x, w in numbers) / total_weight\n    wmad = sum(w * abs(x - weighted_mean) for x, w in numbers) / total_weight\n    \n    return wmad\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/53": [
            {
                "task_id": "EvoEval/53",
                "solution": "\ndef add_elements(list1: list, list2: list, index: int):\n    try:\n        result = list1[index] + list2[index]\n        return (result, False)\n    except IndexError:\n        return (None, True)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/66": [
            {
                "task_id": "EvoEval/66",
                "solution": "\ndef advancedDigitSum(s, t):\n    s_sum = 0\n    t_sum = 0\n    for char in s:\n        if char.isupper():\n            s_sum += ord(char)\n    for char in t:\n        if char.islower():\n            t_sum += ord(char)\n    return (s_sum, t_sum)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/16": [
            {
                "task_id": "EvoEval/16",
                "solution": "\ndef count_distinct_characters_substrings(string: str, length: int) -> dict:\n    if length > len(string):\n        return {}\n    result = {}\n    for i in range(len(string) - length + 1):\n        substring = string[i:i+length]\n        distinct_chars = set(substring)\n        result[substring] = len(distinct_chars)\n    return result\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ]
    }
}
