Here's the optimized code for the `correct_bracketing_advanced` function:

```python
def correct_bracketing_advanced(brackets: str) -> bool:
    stack = []
    bracket_map = {"(": ")", "[": "]", "{": "}"}
    for bracket in brackets:
        if bracket in bracket_map:
            stack.append(bracket)
        elif stack and stack[-1] == bracket_map[bracket]:
            stack.pop()
        else:
            return False
    return not stack
```

Explanation:

1. We use a stack to keep track of the opening brackets.
2. We create a dictionary `bracket_map` to map each opening bracket to its corresponding closing bracket.
3. We iterate over each character in the input string `brackets`.
4. If the character is an opening bracket, we push it onto the stack.
5. If the character is a closing bracket and the top of the stack is its corresponding opening bracket, we pop it from the stack.
6. If the character is a closing bracket and the top of the stack is not its corresponding opening bracket, or if the stack is empty, we return `False`.
7. After iterating over all characters, if the stack is not empty, we return `False`. Otherwise, we return `True`.

This implementation has a time complexity of O(n), where n is the length of the input string, and a space complexity of O(n), where n is the number of opening brackets in the input string.
