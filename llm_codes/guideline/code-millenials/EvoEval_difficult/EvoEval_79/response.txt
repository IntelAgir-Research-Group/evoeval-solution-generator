 Here is the Python code that follows the above guidelines:

```python
def decimal_to_binary(decimal, padding_length):
    if not isinstance(decimal, int) or not isinstance(padding_length, int):
        return "Invalid Input"
    if decimal < 0 or padding_length < 0:
        return "Invalid Input"
    binary = bin(decimal)[2:]
    if len(binary) > padding_length:
        return "Padding length is too small"
    padded_binary = binary.zfill(padding_length)
    return f"db{padded_binary}db"
```

This code first checks if the inputs are valid (i.e., they are both positive integers). If not, it returns an error message. Then, it converts the decimal number to binary using Python's built-in bin() function, and removes the '0b' prefix. After that, it checks if the length of the binary number is greater than the padding length. If so, it returns an error message. Otherwise, it pads the binary number with zeros at the beginning to reach the required length using the zfill() method, and wraps it with "db" at the beginning and at the end.