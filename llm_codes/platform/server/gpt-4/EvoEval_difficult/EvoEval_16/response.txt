Here is the Python code for the function `count_distinct_characters_substrings`. This function uses a sliding window approach to generate all substrings of the given length and then counts the distinct characters in each substring. The results are stored in a dictionary where the keys are the substrings and the values are the counts of distinct characters.

```python
def count_distinct_characters_substrings(string: str, length: int) -> dict:
    if length > len(string):
        return {}

    result = {}
    for i in range(len(string) - length + 1):
        substring = string[i:i+length]
        result[substring] = len(set(substring))

    return result
```

This function is efficient because it only needs to iterate over the string once and it uses a set to count the distinct characters in each substring, which is a constant time operation. The space complexity is also efficient because it only needs to store the substrings and their counts in a dictionary. The size of the dictionary is proportional to the length of the string and the given length, so it will not exceed the available memory on the server.