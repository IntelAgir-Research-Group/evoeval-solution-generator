Here is the Python code that meets all the requirements:

```python
def next_smallest_and_largest(lst):
    if not lst or len(lst) < 2:
        return (None, None)

    smallest = second_smallest = float('inf')
    largest = second_largest = float('-inf')

    for num in lst:
        if num <= smallest:
            if num < smallest:
                second_smallest = smallest
                smallest = num
        elif num < second_smallest:
            second_smallest = num

        if num >= largest:
            if num > largest:
                second_largest = largest
                largest = num
        elif num > second_largest:
            second_largest = num

    if second_smallest == float('inf'):
        second_smallest = None
    if second_largest == float('-inf'):
        second_largest = None

    return (second_smallest, second_largest)
```

This function works by maintaining four variables: `smallest`, `second_smallest`, `largest`, and `second_largest`. It iterates through the list once, updating these variables as necessary. If a number is smaller than `smallest`, it updates `second_smallest` to the old `smallest` and updates `smallest` to the new number. If a number is larger than `largest`, it updates `second_largest` to the old `largest` and updates `largest` to the new number. If a number is in between `smallest` and `second_smallest`, it updates `second_smallest`. If a number is in between `largest` and `second_largest`, it updates `second_largest`. At the end, it checks if `second_smallest` and `second_largest` have been updated from their initial values, and if not, sets them to `None`. This ensures that the function has a time complexity of O(n).