Here is the Python code that fulfills your requirements. This code uses a sliding window approach to generate all substrings of the given length and then counts the distinct characters in each substring. It uses a dictionary to store the results, where each key is a substring and each value is the count of distinct characters in that substring.

```python
def count_distinct_characters_substrings(string: str, length: int) -> dict:
    if length > len(string):
        return {}

    result = {}
    for i in range(len(string) - length + 1):
        substring = string[i:i+length]
        result[substring] = len(set(substring))

    return result
```

This code is efficient because it only iterates over the string once and uses a set to count the distinct characters in each substring, which is a constant time operation. It also makes good use of the available memory by storing the results in a dictionary, which is a space-efficient data structure.