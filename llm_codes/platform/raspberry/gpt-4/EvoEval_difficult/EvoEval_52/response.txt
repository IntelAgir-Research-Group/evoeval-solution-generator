Here is the optimized code for the Raspberry Pi configuration:

```python
def below_above_threshold(l: list, t1: int, t2: int, s: str):
    if s == 'below':
        for i, num in enumerate(l):
            if num >= t1:
                return i
        return True
    elif s == 'above':
        for i, num in enumerate(l):
            if num <= t2:
                return i
        return True
    else:
        return -1
```

This code uses the `enumerate` function to iterate over the list `l` and check each number against the threshold. If the number does not meet the condition, the function immediately returns the index of that number. This approach is efficient because it stops as soon as it finds a number that does not meet the condition, rather than checking all the numbers in the list. If all numbers meet the condition, the function returns `True`.

The `enumerate` function is more efficient than using a for loop with a range because it avoids the overhead of creating and incrementally updating an index variable. This can make a significant difference in performance when dealing with large lists.

The function also uses short-circuit evaluation in the if-elif-else structure to avoid unnecessary comparisons. If the string `s` is 'below', the function does not check whether it is 'above', and if `s` is neither 'below' nor 'above', the function immediately returns -1 without checking any numbers in the list. This can also improve performance, especially when dealing with large lists.